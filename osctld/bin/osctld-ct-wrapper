#!/usr/bin/env ruby
# Run a container within a PTY and forward its input/output via stdin/stdout.
#
# Usage: $0 <title> <inpipe> <outpipe> lxc-start...
#
# `inpipe` and `outpipe` are paths to named pipes, which stdin/stdout
# is connected to. It is the responsibility of the parent process to connect
# these pipes to stdin/stdout of the wrapper. This wrapper reads from
# `inpipe/stdin` and forwards the data to the wrapped process. Data from
# the wrapped process are written to `outpipe/stdout`.
#
# Data read from `inpipe/stdin` are expected to be in JSON, one command on every
# line.
#
#   {
#     "keys": base64 encoded input data,
#     "rows": terminal height,
#     "cols": terminal width
#   }
#
# The command can contain just `keys`, `rows` and `cols` together, or all three
# keys.
#
# Data written to `outpipe/stdout` are in a raw form, just as the wrapped
# process writes them.
require 'base64'
require 'json'
require 'pty'
require 'timeout'

class Wrapper
  def initialize(args)
    ctid = args.shift
    @in_pipe = args.shift
    @out_pipe = args.shift
    @cmd = args
    @current_rows = 25
    @current_cols = 80
    @buf = ''

    Process.setproctitle("osctld: CT #{ctid}")
  end

  def run
    r_pty, w_pty, @pid = PTY.spawn(*@cmd)
    
    catch(:stop) do
      loop do
        work(r_pty, w_pty)
      end
    end

    terminate(pid)
  end

  protected
  attr_reader :pid, :buf, :current_rows, :current_cols

  def work(r_pty, w_pty)
    rs, _ = IO.select([$stdin, r_pty])

    rs.each do |r|
      case r
      when $stdin
        str = read_stdin
        stop if str.nil?

        buf << str

        while i = buf.index("\n")
          t = buf[0..i]
          @buf = buf[i+1..-1]

          begin
            cmd = JSON.parse(t, symbolize_names: true)

          rescue JSON::ParserError
            next
          end

          if cmd[:keys]
            begin
              keys = Base64.strict_decode64(cmd[:keys])

            rescue ArgumentError
              next
            end

            w_pty.write(keys)
            w_pty.flush
          end

          if cmd[:rows] && cmd[:cols]
            new_rows = cmd[:rows].to_i
            new_cols = cmd[:cols].to_i

            if new_rows > 0 && new_cols > 0 \
              && (new_rows != current_rows || new_cols != current_cols)
              @current_rows = new_rows
              @current_cols = new_cols

              `stty -F #{r_pty.path} rows #{current_rows} cols #{current_cols}`
              Process.kill('WINCH', pid)
            end
          end
        end

      when r_pty
        buf = read_nonblock(r_pty)
        stop if buf.nil?

        $stdout.write(buf)
        $stdout.flush
      end
    end
  end

  def stop
    throw(:stop)
  end

  def terminate(pid)
    status = nil

    begin
      Timeout.timeout(3) do
        _, status = Process.wait2(pid)
      end

    rescue Timeout::Error
      Process.kill('KILL', pid)
      _, status = Process.wait2(pid)
    end
  end

  def read_nonblock(io)
    io.read_nonblock(4096)

  rescue IO::WaitReadable
    ''

  rescue Errno::EIO
    nil
  end

  def read_stdin
    read_nonblock($stdin)

  rescue EOFError
    # osctld has crashed/exited, reopen the pipes and wait for it to restart
    $stdin.reopen(@in_pipe, 'r')
    $stdout.reopen(@out_pipe, 'w')
    ''
  end
end

w = Wrapper.new(ARGV)
w.run
